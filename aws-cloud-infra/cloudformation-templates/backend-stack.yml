Description: Manage Frontend of Redis Solar
Parameters:
  ProjectName:
    Description: Project to which Stack is being applied
    Type: String
  EnvironmentName:
    Description: Environment name to be used as prefixed to resources
    Type: String
  KeyName:
    Description: SSH key Name
    Type: String
  ImageId:
    Description: AMI Image Id for EC2 instance
    Type: String
  InstanceType:
    Description: The Capability of your EC2 instance
    Type: String

Resources:
  AppServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App Security Group
      GroupName: !Sub ${ProjectName}-${EnvironmentName} App Server SG 
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8081
        ToPort: 8081
        # CidrIp: 0.0.0.0/0  # From Web server security group
        SourceSecurityGroupId:
          Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-WebAppSGID
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName} App Server SG
  
  BackendAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - Ref: AppServerSecGroup
      # BlockDeviceMappings:
      # - DeviceName: "/dev/sdk"
      #   Ebs:
      #     VolumeSize: '10'
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          yum update -y;
          yum install git -y;
          amazon-linux-extras install nginx1 -y;
          # Install node.js
          yum install -y gcc-c++ make;
          curl -sL https://rpm.nodesource.com/setup_15.x | sudo -E bash -;
          yum install nodejs -y;
          git clone https://github.com/tutugodfrey/redis-solar;
          cd redis-solar;
          npm install;
          # We're running redis with TLS enabled with self-signed cert
          # Disabling certificate verification
          export NODE_TLS_REJECT_UNAUTHORIZED='0'
          npm start;
  
  BackendAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${ProjectName}-${EnvironmentName}-PUB-NETS" # Temporarily using the public subnet
          # !Sub "${ProjectName}-${EnvironmentName}-PRI-NETS" # Launching in the private subnets
      LaunchConfigurationName:
        !Ref BackendAppLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
      - Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-BackendAppTargetGroupARN # Define this target
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-BackendApp
          PropagateAtLaunch: Yes
