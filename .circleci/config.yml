# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/project

# Using my customized centos image packed with redis and node.js installed and configured
noderedis: &noderedis
  docker:
    - image: tutug/node-redis
 

commands:
  destroy_environment:
    steps:
      - run:
          ## Here we want to destroy the infrastructure provisions
          ## However, I am using describe stack for now because the I am still building the infrastructure
          ## And would need to monitor and understand any failure that would occur
          ## would delete from my terminal afterword
          name: Destroy environment when deployment fails
          when: on_fail
          command: |
            # run cloudformation delete_stack command here.
            export TERM=xterm-color
            pwd
            cd  ~/project/aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            describe_stack redis-solar-vpc-stack  # using this as placeholder command for now
            describe_stack loadbalancer-stack
      - run:
          name: Pipeline Success
          command: |
            echo """
              If you see this message, then the Pipeline has run successfully, Congrate!
              Inspect the workflow to see what the Pipeline does.
            """
            
            

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1


jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run Lint
          command: npm run lint;

  test:
    <<: *noderedis
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run test
          command: |
            export NODE_TLS_REJECT_UNAUTHORIZED='0'
            /usr/local/bin/redis-server /etc/redis/redis.conf &
            npm test;

  analyze:
    <<: *defaults
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Security Audit with npm audit
          command: echo Pending npm audit;
  
  provision_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Executu CloudFormation template to deploy the infrastructe
          command: |
            export TERM=xterm-color
            cd aws-cloud-infra/cloudformation-templates/
            ./deploy-stacks.sh
  
  configure_infrastructure:
    <<: *noderedis
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [YOUR_SSH_FINGER_PRINT_HERE]
      - run:
          name: Run playbook to configure and start the server
          command:
            echo running ansible-playbook -i inventory playbook.yml # work in progress
  
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Curl the Application to get response
          command: |
            export TERM=xterm-color
            URL=http://google.com
            if curl -s --head ${URL}; then
              # success
              exit 0
            else
              # fails
              exit 1
            fi
        # Rollback if deployment fails
      - run: exit 1 # Delibrately initiating failure here
      - destroy_environment

workflows:
  default: 
    jobs:
      - build
      - test:
          requires: [build]
      - analyze:
         requires:  [test]
      - provision_infrastructure:
          requires: [build, test, analyze]
          filters:
            branches:
              only: [develop]
      - configure_infrastructure:
          requires: [provision_infrastructure]
      - smoke_test:
          requires: [configure_infrastructure]
