# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/redis-solar

# Using my customized centos image packed with redis and node.js installed and configured
noderedis: &noderedis
  docker:
    - image: tutug/node-redis
  working_directory: ~/redis-solar
 

commands:
  destroy_environment:
    steps:
      - run:
          ## Here we want to destroy the infrastructure provisions
          ## And would need to monitor and understand any failure that would occur
          ## would delete from my terminal afterword
          name: Destroy environment when deployment fails
          when: on_fail
          command: |
            # run cloudformation delete_stack command here.
            export TERM=xterm-color
            cd  ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            delete_stack backend-stack${CIRCLE_WORKFLOW_ID};
            sleep 150
            delete_stack loadbalancer-stack${CIRCLE_WORKFLOW_ID};

  destroy_test_environment:
    steps:
      - run:
          name: Clear up environment
          command: |
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            export "$(grep ENVIRONMENT ~/.env)"
            delete_stack redis-solar-${ENVIRONMENT}-backend-app-${CIRCLE_WORKFLOW_ID}
            delete_stack redis-solar-${ENVIRONMENT}-natinstance-${CIRCLE_WORKFLOW_ID}
            delete_stack redis-solar-redis-${ENVIRONMENT}-db-${CIRCLE_WORKFLOW_ID}
            sleep 350
            delete_stack redis-solar-${ENVIRONMENT}-loadbalancer-${CIRCLE_WORKFLOW_ID}

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1


jobs:
  configure_env:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: set-env
          command: |
            ENVIRONMENT=Test
            echo The current branch is $CIRCLE_BRANCH
            if [[ $CIRCLE_BRANCH == 'develop' ]]; then
              ENVIRONMENT=Prod
            fi
            echo ENVIRONMENT=${ENVIRONMENT} >> ~/.env;

      - persist_to_workspace:
          root: ~/
          paths:
            - .env
  build:
    <<: *defaults
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run Lint
          command: npm run lint;

  test:
    <<: *noderedis
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run test
          command: |
            export NODE_TLS_REJECT_UNAUTHORIZED='0'
            /usr/local/bin/redis-server /etc/redis/redis.conf &
            npm test;

  analyze:
    <<: *defaults
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Security Audit with npm audit
          command: |
            echo Pending npm audit;
  
  provision_prod_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - run:
          name: Executu CloudFormation template to deploy the infrastructe
          command: |
            export TERM=xterm-color
            export "$(grep ENVIRONMENT ~/.env)"
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            ./initial-env-setup.sh
            # deploy_stack redis-solar-${ENVIRONMENT}-loadbalancer-${CIRCLE_WORKFLOW_ID} loadbalancer-stack.yml WorkflowId=${CIRCLE_WORKFLOW_ID};
            # deploy_stack redis-solar-${ENVIRONMENT}-backend-app-${CIRCLE_WORKFLOW_ID} backend-stack.yml WorkflowId=${CIRCLE_WORKFLOW_ID};
      - destroy_environment
  
  configure_infrastructure:
    <<: *noderedis
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [YOUR_SSH_FINGER_PRINT_HERE]
      - run:
          name: Run playbook to configure and start the server
          command:
            echo running ansible-playbook -i inventory playbook.yml # work in progress

  provision_test_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - run:
          name: Executu CloudFormation template to deploy the infrastructure in the test environment
          command: |
            export TERM=xterm-color
            export "$(grep ENVIRONMENT ~/.env)"
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            ./initial-env-setup.sh 
      - destroy_environment

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - run:
          name: Curl the Application to get response
          command: |
            export TERM=xterm-color
            export "$(grep ENVIRONMENT ~/.env)"
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            export LB_URL=$(describe_stack redis-solar-${ENVIRONMENT}-loadbalancer-${CIRCLE_WORKFLOW_ID} "Stacks[*].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue");
            counter=0;
            echo $LB_URL
            until curl -s --head http://${LB_URL} || [ $counter -gt 20 ]; do
              echo Waiting for application to respond
              sleep 3;
              ((counter++));
            done
      - destroy_environment # Rollback if deployment fails
  
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - run:
          name: Get Old WorkflowId
          command: |
            export "$(grep ENVIRONMENT ~/.env)"
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            OldWorkflowId=$(describe_stack redis-solar-${ENVIRONMENT}-cloudfront "Stacks[*].Outputs[?OutputKey=='WorkflowId'].OutputValue"));
            echo OldWorkflowId=$OldWorkflowId >> ~/.env;
            echo OLD ID $(cat .env)
      
      - persist_to_workspace:
          root: ~/
          paths:
            - .env
      - run:
          name: Update cloud origin with loadbalancer url
          command: |
            export "$(grep ENVIRONMENT ~/.env)"
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            deploy_stack redis-solar-${ENVIRONMENT}-cloudfront cloudfront.yml WorkflowId=${CIRCLE_WORKFLOW_ID}

      - destroy_environment # Rollback on failure 

  cleanup_old_prod_environment:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - run:
          name: clean up
          command: |
            # clean up old environment
            cd ./aws-cloud-infra/cloudformation-templates/
            . ./stack-helper.sh
            export "$(grep ENVIRONMENT ~/.env)"
            export "$(grep OldWorkflowId ~/.env)"
            delete_stack redis-solar-${ENVIRONMENT}-backend-app-${OldWorkflowId};
            sleep 350
            delete_stack redis-solar-${ENVIRONMENT}-loadbalancer-${OldWorkflowId}

  cleanup_test_environment:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run:
         name: Install Dependencies
         command: |
           yum install -y tar gzip;

      - attach_workspace:
          at: ~/

      - destroy_test_environment

workflows:
  default: 
    jobs:
      - configure_env
      - build:
          requires: [configure_env]
      - test:
          requires: [build]
      - analyze:
         requires:  [test]
      - provision_prod_infrastructure:
          requires: [build, test, analyze]
          filters:
            branches:
              only: [develop]
      - provision_test_infrastructure:
          requires: [build, test, analyze]
          filters:
            branches:
              ignore: [develop]
      - configure_infrastructure:
          name: configure_prod_infrastructure
          requires: [provision_prod_infrastructure]
      - configure_infrastructure:
          name: configure_test_infrastructure
          requires: [provision_test_infrastructure]
      - smoke_test:
          name: smoke_test_prod
          requires: [configure_prod_infrastructure]
      - smoke_test:
          name: smoke_test_test
          requires: [configure_test_infrastructure]
      - promote_to_production:
          requires: [smoke_test_prod]
          filters:
            branches:
              only: [develop]
      - cleanup_old_prod_environment:
          requires: [promote_to_production]
      - verify_test:
          type: approval
          requires:
            - smoke_test_test
      - cleanup_test_environment:
          requires: [verify_test]
